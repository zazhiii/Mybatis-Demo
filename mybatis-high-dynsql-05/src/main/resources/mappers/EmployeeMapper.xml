<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace等于mapper接口类的全限定名,这样实现对应 -->
<mapper namespace="com.zazhi.mapper.EmployeeMapper">

    <!--
        1. if标签
            1.1 作用: 动态拼接sql语句
            1.2 使用: <if test="条件">sql语句</if>
            1.3 说明:
                1.3.1 test属性: 条件表达式
                1.3.2 sql语句: 当条件表达式为true时,sql语句才会被拼接到最终的sql语句中
        2. where标签
            2.1 作用: 动态拼接where子句
            2.2 使用: <where>sql语句</where>
            2.3 说明:
                2.3.1 sql语句: where子句中的条件语句
                2.3.2 where标签会自动去掉第一个and或者or
    -->
    <select id="query" resultType="com.zazhi.pojo.Employee">
        select * from employee
        <where>
            <if test="name != null and name != ''">
                and name like concat('%',#{name},'%')
            </if>
            <if test="salary != null">
                and salary = #{salary}
            </if>
        </where>
    </select>

    <!--
        set标签
            1. 作用: 动态拼接set子句
            2. 使用: <set>sql语句</set>
            3. 说明:
                3.1 sql语句: set子句中的条件语句
                3.2 set标签会自动去掉最后一个逗号
    -->
    <update id="update">
        update t_emp
        <!-- set emp_name=#{empName},emp_salary=#{empSalary} -->
        <!-- 使用set标签动态管理set子句，并且动态去掉两端多余的逗号 -->
        <set>
            <if test="empName != null">
                emp_name=#{empName},
            </if>
            <if test="empSalary &lt; 3000">
                emp_salary=#{empSalary},
            </if>
        </set>
        where emp_id=#{empId}
    </update>


    <!--
        foreach标签
            1. 作用: 遍历集合
            2. 使用: <foreach collection="集合" item="元素" open="开始符号" separator="分隔符" close="结束符号">sql语句</foreach>
            3. 说明:
                3.1 collection属性: 集合
                3.2 item属性: 集合中的元素
                3.3 open属性: 开始符号
                3.4 separator属性: 分隔符
                3.5 close属性: 结束符号
     -->
    <select id="queryBatch" resultType="com.zazhi.pojo.Employee">
        select * from employee
        WHERE
        emp_id in
        <!-- e.g. (1, 2, 3, 4) -->
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </select>

    <delete id="deleteBatch">
        DELETE FROM employee
        WHERE emp_id in
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>

    <insert id="insertBatch">
        insert into employee(emp_id, emp_name, emp_salary)
        values
        <foreach collection="employees" item="employee" separator=",">
            (#{employee.empId}, #{employee.empName}, #{employee.empSalary})
        </foreach>
    </insert>

    <update id="updateBatch">
        <foreach collection="employees" item="employee" separator=";">
            update employee
            set emp_name=#{employee.empName}, emp_salary=#{employee.empSalary}
            where emp_id=#{employee.empId}
        </foreach>
    </update>

</mapper>